# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
started = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
#soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        if self.thrust:
            #center of the tiled img is the thrusting ship
            canvas.draw_image(self.image, [self.image_center[0]+self.image_size[0],self.image_center[1]], self.image_size, self.pos, self.image_size,self.angle)
        else:    
            canvas.draw_image(self.image, self.image_center, self.image_size, self.pos, self.image_size,self.angle)

    def update(self):
        self.pos[0]+=self.vel[0]
        self.pos[1]+=self.vel[1]
        self.angle+=self.angle_vel
        #modulating the position of the ship so it doesnt go off screen
        self.pos[0]=self.pos[0]%WIDTH
        self.pos[1]=self.pos[1]%HEIGHT
        #Friction!
        self.vel[0]*=0.98
        self.vel[1]*=0.98
        
        #updating velocity based on acceleration
        if self.thrust:
            self.vel[0]+=angle_to_vector(self.angle)[0]*0.1
            self.vel[1]+=angle_to_vector(self.angle)[1]*0.1
        
    def modify_angular_velocity(self,direction):
        if direction == "right":
            self.angle_vel = 0.05
        elif direction == "left":
            self.angle_vel = -0.05
        elif direction == "stop":
            self.angle_vel = 0
            
    def is_thrusting(self,thr):
        self.thrust = thr
        if self.thrust:
            ship_thrust_sound.play()
        elif not self.thrust:
            ship_thrust_sound.rewind()
            
    def shoot(self):
        a_missile = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [-1,1], 0, 0, missile_image, missile_info, missile_sound)
        a_missile.pos[0]=self.pos[0]+angle_to_vector(self.angle)[0]*self.radius
        a_missile.pos[1]=self.pos[1]+angle_to_vector(self.angle)[1]*self.radius
        a_missile.vel[0]=self.vel[0]+angle_to_vector(self.angle)[0]*5
        a_missile.vel[1]=self.vel[1]+angle_to_vector(self.angle)[1]*5
        
        a_missile.sound=missile_sound.play()
        missile_group.add(a_missile)
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        canvas.draw_image(self.image,self.image_center,self.image_size,self.pos, [self.radius*2,2*self.radius],self.angle)
    
    def update(self):
        self.angle+=self.angle_vel 
        self.pos[0]+=self.vel[0]
        self.pos[1]+=self.vel[1]
        
        self.pos[0]=self.pos[0]%WIDTH
        self.pos[1]=self.pos[1]%HEIGHT
        self.age+=1
        
        #print self.lifespan, self.age
        if self.lifespan > self.age:
            return False
        elif self.lifespan <= self.age:
            return True
        
    def collision(self,other_obj):
        if dist(self.pos,other_obj.pos) <= self.radius +other_obj.radius:
            return True
        else:
            return False
    
    
           
def draw(canvas):
    global time,score,lives,started,soundtrack
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    
    # draw ship and sprites
    my_ship.draw(canvas)
    #a_rock.draw(canvas)
    #a_missile.draw(canvas)
    
    # update ship and sprites
    my_ship.update()
    #a_rock.update()
    #a_missile.update()
    if started:
        process_sprite_group(rock_group,canvas)
    #print process_sprite_group(missile_group,canvas)
        process_sprite_group(missile_group,canvas)
    
     #draws lives and score
    canvas.draw_text("Score "+str(score),[WIDTH*0.2,HEIGHT/12],30,"rgba(114,50,200,0.6)")
    canvas.draw_text("Lives "+str(lives),[WIDTH*0.7,HEIGHT/12],30,"rgba(200,50,150,0.7)")
     
        # draw splash screen if not started
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
        lives=3
        
    if group_collide(rock_group,my_ship):
        lives-=1
        
    group_group_collide(missile_group,rock_group)
    #score+=group_group_collide(missile_group,rock_group)
    if lives == 0:
        soundtrack.rewind()
        started = False
        
    
# timer handler that spawns a rock    
def rock_spawner():
    global a_rock,WIDTH,HEIGHT, my_ship,score
    
    
    
    tf=[]
    br=0
    for i in range(100):
        tf.append(-0.01+br)
        br+=0.001
    random_ang_vel = random.choice(tf)
    random_pos = [random.randrange(0,WIDTH),random.randrange(0,HEIGHT)]
    random_vel = [random.choice(tf)*(score/25),random.choice(tf)*(score/25)]
    
    #print type(random_ang_vel), random_ang_vel, tf
    a_rock = Sprite(random_pos, random_vel, 0, random_ang_vel, asteroid_image, asteroid_info)
    if len(rock_group)<=11 and dist(a_rock.pos,my_ship.pos)>1.5*(a_rock.radius+my_ship.radius):
        rock_group.add(a_rock)
    print a_rock.vel
# funkcija koja crta spritove
def process_sprite_group(aset,canvas):
    diff_group=set([])
    for sprite in aset:
        sprite.draw(canvas)
        sprite.update()
        if sprite.update():
            diff_group.add(sprite)
    aset.difference_update(diff_group)
            
            
        
        
def group_collide(group,a_obj):
    help_set=set([])
    x=False
    for inst in group:
        if inst.collision(a_obj):
            help_set.add(inst)
            x= True
            break
        else:
            x= False 
    group.difference_update(help_set)
    return x
  
def group_group_collide(group1,group2):
    global score
    help_set=set([])
    copy_group1=list(group1)
    for missile in group1:
        #print group_collide(group2,missile)
        #group_collide(group2,missile)
        #print group_collide(group2,missile)
        #print score
        if group_collide(group2,missile):
            help_set.add(missile)
            score+=10
            
            
    group1.difference_update(help_set)
   

def keydown(key):
    if key == simplegui.KEY_MAP["left"]:
        my_ship.modify_angular_velocity("left")
    if key == simplegui.KEY_MAP["right"]:    
        my_ship.modify_angular_velocity("right")
        
    if key == simplegui.KEY_MAP["up"]:
        my_ship.is_thrusting(True)
    
    if key == simplegui.KEY_MAP["space"]:
        my_ship.shoot()
        
    
        
def keyup(key):
    if key == simplegui.KEY_MAP["left"] or key == simplegui.KEY_MAP["right"]:
        my_ship.modify_angular_velocity("stop")
    
    if key == simplegui.KEY_MAP["up"]:
        my_ship.is_thrusting(False)
        
# mouseclick handlers that reset UI and conditions whether splash image is drawn
def click(pos):
    global started,score, soundtrack
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
    score=0
    soundtrack.play()
    
    
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0.1, 0.1], 0, ship_image, ship_info)
rock_group=set([])
#a_rock = Sprite([WIDTH / 3, HEIGHT / 3], [1, 1], 0, 0.1, asteroid_image, asteroid_info)
missile_group=set([])
#a_missile = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [-1,1], 0, 0, missile_image, missile_info, missile_sound)

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()