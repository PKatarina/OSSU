# Basic infrastructure for Bubble Shooter

import simplegui
import random
import math

# Global constants
WIDTH = 800
HEIGHT = 600
FIRING_POSITION = [WIDTH // 2, HEIGHT]
FIRING_LINE_LENGTH = 60
FIRING_ANGLE_VEL_INC = 0.02
BUBBLE_RADIUS = 20
COLOR_LIST = ["Red", "Green", "Blue", "White", "rgb(100,0,100)"]

# global variables
firing_angle = math.pi / 2
firing_angle_vel = 0
bubble_stuck = True

# firing sound
firing_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/Collision8-Bit.ogg")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0]-q[0])**2+(p[1]-q[1])**2)


# class defintion for Bubbles
class Bubble:
    
    def __init__(self):
        global FIRING_POSITION, COLOR_LIST
        self.pos = list(FIRING_POSITION)
        self.vel = [0,0]
        self.color = random.choice(COLOR_LIST)
    
    def update(self):
        global WIDTH, BUBBLE_RADIUS
        if self.pos[0]-BUBBLE_RADIUS <0 or self.pos[0]+BUBBLE_RADIUS >= WIDTH:
            self.vel[0]=-self.vel[0]
            #print self.vel   
        self.pos[0]+=self.vel[0]
        self.pos[1]+=self.vel[1]
        
    def fire_bubble(self, vel):
        global firing_sound
        if self.pos == FIRING_POSITION:
            self.vel =vel 
        firing_sound.play()
        
    def is_stuck(self): 
        pass

    def collide(self, bubble):
        pass
            
    def draw(self, canvas):
#        ovaj draw crta citav bubble na pocetku
#        canvas.draw_circle([self.pos[0],self.pos[1]-BUBBLE_RADIUS],
#                           BUBBLE_RADIUS,1,"White",self.color)

#		ovaj draw crta pola bubbla na pocetku tako da je firing line u centru bubbla
        canvas.draw_circle(self.pos,BUBBLE_RADIUS,1,"White",self.color)

# define keyhandlers to control firing_angle
def keydown(key):
    global a_bubble, firing_angle_vel, bubble_stuck
    inputs = {"left": 0.05,"right":-0.05}
    for i in inputs:
        if key == simplegui.KEY_MAP[i]:
            firing_angle_vel=inputs[i]
            
    if key == simplegui.KEY_MAP["space"]:
        b_orient=angle_to_vector(firing_angle)
        a_bubble.fire_bubble([3*b_orient[0],-3*b_orient[1]])
    
def keyup(key):
    global firing_angle_vel
    firing_angle_vel = 0
    
# define draw handler
def draw(canvas):
    global firing_angle, a_bubble, bubble_stuck,firing_angle_vel
    global FIRING_POSITION, FIRING_LINE_LENGTH
    
    # update firing angle
    
    firing_angle+= firing_angle_vel
    
    orient=angle_to_vector(firing_angle)
    upper_endpoint=[FIRING_POSITION[0]+FIRING_LINE_LENGTH*orient[0],
                    FIRING_POSITION[1]-FIRING_LINE_LENGTH*orient[1]]
    
    # draw firing line
    canvas.draw_line(FIRING_POSITION,upper_endpoint,2,"Red")
    
    # update a_bubble and check for sticking
   
    a_bubble.update()
    #print a_bubble.pos
    
    # draw a bubble and stuck bubbles
    a_bubble.draw(canvas)
 
# create frame and register handlers
a_bubble =Bubble()
frame = simplegui.create_frame("Bubble Shooter", WIDTH, HEIGHT)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_draw_handler(draw)

# create initial buble and start frame
frame.start()