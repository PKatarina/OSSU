"""
An example of creating a distance field using Manhattan distance
"""
import math
GRID_HEIGHT = 6
GRID_WIDTH = 8


def manhattan_distance(row0, col0, row1, col1):
    """
    Compute the Manhattan distance between the cells
    (row0, col0) and (row1, col1)
    """
    
    
    return int(math.fabs(row0-row1)+math.fabs(col0-col1))
        
print manhattan_distance(0,0,6,6)
    
def create_distance_field(entity_list):
        """
        Create a Manhattan distance field that contains the minimum distance to 
        each entity (zombies or humans) in entity_list
        Each entity is represented as a grid position of the form (row, col) 
        """

        global GRID_HEIGHT,GRID_WIDTH
        
        rows=[]
        colums=[]
        dist_list=[]
        for jdx in range(GRID_HEIGHT):        	
            for idx in range(GRID_WIDTH):
                for entities in entity_list:
                    dist_list.append(manhattan_distance(entities[0],entities[1],jdx,idx))
                rows.append(min(dist_list))
                dist_list=[]
            colums.append(rows)
            rows=[]

            
        
        return colums
        
#print create_distance_field([[4,0],[3,2]])
    
def print_field(field):
    """
    Print a distance field in a human readable manner with 
    one row per line
    """

    for rows in field:
        print rows

def run_example():
    """
    Create and print a small distance field
    """
    field = create_distance_field([[4, 0],[2, 5]])
    print_field(field)
    
run_example()


# Sample output for the default example
#[4, 5, 5, 4, 3, 2, 3, 4]
#[3, 4, 4, 3, 2, 1, 2, 3]
#[2, 3, 3, 2, 1, 0, 1, 2]
#[1, 2, 3, 3, 2, 1, 2, 3]
#[0, 1, 2, 3, 3, 2, 3, 4]
#[1, 2, 3, 4, 4, 3, 4, 5]
    
    